{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _DefaultTimer = _interopRequireDefault(require(\"./DefaultTimer\"));\n\nvar _DefaultRenderer = _interopRequireDefault(require(\"./DefaultRenderer\"));\n\nvar _DefaultTouchProcessor = _interopRequireDefault(require(\"./DefaultTouchProcessor\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\Amanda\\\\Documents\\\\KOMA\\\\project\\\\MTDuellen\\\\node_modules\\\\react-native-game-engine\\\\src\\\\GameEngine.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar getEntitiesFromProps = function getEntitiesFromProps(props) {\n  return props.initState || props.initialState || props.state || props.initEntities || props.initialEntities || props.entities;\n};\n\nvar isPromise = function isPromise(obj) {\n  return !!(obj && obj.then && obj.then.constructor && obj.then.call && obj.then.apply);\n};\n\nvar GameEngine = function (_Component) {\n  (0, _inherits2.default)(GameEngine, _Component);\n\n  var _super = _createSuper(GameEngine);\n\n  function GameEngine(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, GameEngine);\n    _this = _super.call(this, props);\n\n    _this.clear = function () {\n      _this.touches.length = 0;\n      _this.events.length = 0;\n      _this.previousTime = null;\n      _this.previousDelta = null;\n    };\n\n    _this.start = function () {\n      _this.clear();\n\n      _this.timer.start();\n\n      _this.dispatch({\n        type: \"started\"\n      });\n    };\n\n    _this.stop = function () {\n      _this.timer.stop();\n\n      _this.dispatch({\n        type: \"stopped\"\n      });\n    };\n\n    _this.swap = function _callee(newEntities) {\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isPromise(newEntities)) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 3;\n              return _regenerator.default.awrap(newEntities);\n\n            case 3:\n              newEntities = _context.sent;\n\n            case 4:\n              _this.setState({\n                entities: newEntities || {}\n              }, function () {\n                _this.clear();\n\n                _this.dispatch({\n                  type: \"swapped\"\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.publish = function (e) {\n      _this.dispatch(e);\n    };\n\n    _this.publishEvent = function (e) {\n      _this.dispatch(e);\n    };\n\n    _this.dispatch = function (e) {\n      setTimeout(function () {\n        _this.events.push(e);\n\n        if (_this.props.onEvent) _this.props.onEvent(e);\n      }, 0);\n    };\n\n    _this.dispatchEvent = function (e) {\n      _this.dispatch(e);\n    };\n\n    _this.updateHandler = function (currentTime) {\n      var args = {\n        touches: _this.touches,\n        screen: _this.screen,\n        layout: _this.layout,\n        events: _this.events,\n        dispatch: _this.dispatch,\n        time: {\n          current: currentTime,\n          previous: _this.previousTime,\n          delta: currentTime - (_this.previousTime || currentTime),\n          previousDelta: _this.previousDelta\n        }\n      };\n\n      var newState = _this.props.systems.reduce(function (state, sys) {\n        return sys(state, args);\n      }, _this.state.entities);\n\n      _this.touches.length = 0;\n      _this.events.length = 0;\n      _this.previousTime = currentTime;\n      _this.previousDelta = args.time.delta;\n\n      _this.setState({\n        entities: newState\n      });\n    };\n\n    _this.onLayoutHandler = function (e) {\n      _this.screen = _reactNative.Dimensions.get(\"window\");\n      _this.layout = e.nativeEvent.layout;\n\n      _this.forceUpdate();\n    };\n\n    _this.onTouchStartHandler = function (e) {\n      _this.touchProcessor.process(\"start\", e.nativeEvent);\n    };\n\n    _this.onTouchMoveHandler = function (e) {\n      _this.touchProcessor.process(\"move\", e.nativeEvent);\n    };\n\n    _this.onTouchEndHandler = function (e) {\n      _this.touchProcessor.process(\"end\", e.nativeEvent);\n    };\n\n    _this.state = {\n      entities: null\n    };\n    _this.timer = props.timer || new _DefaultTimer.default();\n\n    _this.timer.subscribe(_this.updateHandler);\n\n    _this.touches = [];\n    _this.screen = _reactNative.Dimensions.get(\"window\");\n    _this.previousTime = null;\n    _this.previousDelta = null;\n    _this.events = [];\n    _this.touchProcessor = props.touchProcessor(_this.touches);\n    _this.layout = null;\n    return _this;\n  }\n\n  (0, _createClass2.default)(GameEngine, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var entities;\n      return _regenerator.default.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              entities = getEntitiesFromProps(this.props);\n\n              if (!isPromise(entities)) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 4;\n              return _regenerator.default.awrap(entities);\n\n            case 4:\n              entities = _context2.sent;\n\n            case 5:\n              this.setState({\n                entities: entities || {}\n              }, function () {\n                if (_this2.props.running) _this2.start();\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stop();\n      this.timer.unsubscribe(this.updateHandler);\n      if (this.touchProcessor.end) this.touchProcessor.end();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.running !== this.props.running) {\n        if (nextProps.running) this.start();else this.stop();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_reactNative.View, {\n        style: [css.container, this.props.style],\n        onLayout: this.onLayoutHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: css.entityContainer,\n        onTouchStart: this.onTouchStartHandler,\n        onTouchMove: this.onTouchMoveHandler,\n        onTouchEnd: this.onTouchEndHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }, this.props.renderer(this.state.entities, this.screen, this.layout)), _react.default.createElement(_reactNative.View, {\n        pointerEvents: \"box-none\",\n        style: _reactNative.StyleSheet.absoluteFill,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }\n      }, this.props.children));\n    }\n  }]);\n  return GameEngine;\n}(_react.Component);\n\nexports.default = GameEngine;\nGameEngine.defaultProps = {\n  systems: [],\n  entities: {},\n  renderer: _DefaultRenderer.default,\n  touchProcessor: (0, _DefaultTouchProcessor.default)({\n    triggerPressEventBefore: 200,\n    triggerLongPressEventAfter: 700\n  }),\n  running: true\n};\n\nvar css = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  entityContainer: {\n    flex: 1,\n    backgroundColor: \"transparent\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Amanda/Documents/KOMA/project/MTDuellen/node_modules/react-native-game-engine/src/GameEngine.js"],"names":["getEntitiesFromProps","props","initState","initialState","state","initEntities","initialEntities","entities","isPromise","obj","then","constructor","call","apply","GameEngine","clear","touches","length","events","previousTime","previousDelta","start","timer","dispatch","type","stop","swap","newEntities","setState","publish","e","publishEvent","setTimeout","push","onEvent","dispatchEvent","updateHandler","currentTime","args","screen","layout","time","current","previous","delta","newState","systems","reduce","sys","onLayoutHandler","Dimensions","get","nativeEvent","forceUpdate","onTouchStartHandler","touchProcessor","process","onTouchMoveHandler","onTouchEndHandler","DefaultTimer","subscribe","running","unsubscribe","end","nextProps","css","container","style","entityContainer","renderer","StyleSheet","absoluteFill","children","Component","defaultProps","DefaultRenderer","triggerPressEventBefore","triggerLongPressEventAfter","create","flex","backgroundColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,KAAK;AAAA,SAChCA,KAAK,CAACC,SAAN,IACAD,KAAK,CAACE,YADN,IAEAF,KAAK,CAACG,KAFN,IAGAH,KAAK,CAACI,YAHN,IAIAJ,KAAK,CAACK,eAJN,IAKAL,KAAK,CAACM,QAN0B;AAAA,CAAlC;;AAQA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AACvB,SAAO,CAAC,EACNA,GAAG,IACHA,GAAG,CAACC,IADJ,IAEAD,GAAG,CAACC,IAAJ,CAASC,WAFT,IAGAF,GAAG,CAACC,IAAJ,CAASE,IAHT,IAIAH,GAAG,CAACC,IAAJ,CAASG,KALH,CAAR;AAOD,CARD;;IAUqBC,U;;;;;AACnB,sBAAYb,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;;AADiB,UA4CnBc,KA5CmB,GA4CX,YAAM;AACZ,YAAKC,OAAL,CAAaC,MAAb,GAAsB,CAAtB;AACA,YAAKC,MAAL,CAAYD,MAAZ,GAAqB,CAArB;AACA,YAAKE,YAAL,GAAoB,IAApB;AACA,YAAKC,aAAL,GAAqB,IAArB;AACD,KAjDkB;;AAAA,UAmDnBC,KAnDmB,GAmDX,YAAM;AACZ,YAAKN,KAAL;;AACA,YAAKO,KAAL,CAAWD,KAAX;;AACA,YAAKE,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KAvDkB;;AAAA,UAyDnBC,IAzDmB,GAyDZ,YAAM;AACX,YAAKH,KAAL,CAAWG,IAAX;;AACA,YAAKF,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KA5DkB;;AAAA,UA8DnBE,IA9DmB,GA8DZ,iBAAMC,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDnB,SAAS,CAACmB,WAAD,CADR;AAAA;AAAA;AAAA;;AAAA;AAAA,gDAC2CA,WAD3C;;AAAA;AACuBA,cAAAA,WADvB;;AAAA;AAGL,oBAAKC,QAAL,CAAc;AAAErB,gBAAAA,QAAQ,EAAEoB,WAAW,IAAI;AAA3B,eAAd,EAA+C,YAAM;AACnD,sBAAKZ,KAAL;;AACA,sBAAKQ,QAAL,CAAc;AAAEC,kBAAAA,IAAI,EAAE;AAAR,iBAAd;AACD,eAHD;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9DY;;AAAA,UAuEnBK,OAvEmB,GAuET,UAAAC,CAAC,EAAI;AACb,YAAKP,QAAL,CAAcO,CAAd;AACD,KAzEkB;;AAAA,UA2EnBC,YA3EmB,GA2EJ,UAAAD,CAAC,EAAI;AAClB,YAAKP,QAAL,CAAcO,CAAd;AACD,KA7EkB;;AAAA,UA+EnBP,QA/EmB,GA+ER,UAAAO,CAAC,EAAI;AACdE,MAAAA,UAAU,CAAC,YAAM;AACf,cAAKd,MAAL,CAAYe,IAAZ,CAAiBH,CAAjB;;AACA,YAAI,MAAK7B,KAAL,CAAWiC,OAAf,EAAwB,MAAKjC,KAAL,CAAWiC,OAAX,CAAmBJ,CAAnB;AACzB,OAHS,EAGP,CAHO,CAAV;AAID,KApFkB;;AAAA,UAsFnBK,aAtFmB,GAsFH,UAAAL,CAAC,EAAI;AACnB,YAAKP,QAAL,CAAcO,CAAd;AACD,KAxFkB;;AAAA,UA0FnBM,aA1FmB,GA0FH,UAAAC,WAAW,EAAI;AAC7B,UAAIC,IAAI,GAAG;AACTtB,QAAAA,OAAO,EAAE,MAAKA,OADL;AAETuB,QAAAA,MAAM,EAAE,MAAKA,MAFJ;AAGTC,QAAAA,MAAM,EAAE,MAAKA,MAHJ;AAITtB,QAAAA,MAAM,EAAE,MAAKA,MAJJ;AAKTK,QAAAA,QAAQ,EAAE,MAAKA,QALN;AAMTkB,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAEL,WADL;AAEJM,UAAAA,QAAQ,EAAE,MAAKxB,YAFX;AAGJyB,UAAAA,KAAK,EAAEP,WAAW,IAAI,MAAKlB,YAAL,IAAqBkB,WAAzB,CAHd;AAIJjB,UAAAA,aAAa,EAAE,MAAKA;AAJhB;AANG,OAAX;;AAcA,UAAIyB,QAAQ,GAAG,MAAK5C,KAAL,CAAW6C,OAAX,CAAmBC,MAAnB,CACb,UAAC3C,KAAD,EAAQ4C,GAAR;AAAA,eAAgBA,GAAG,CAAC5C,KAAD,EAAQkC,IAAR,CAAnB;AAAA,OADa,EAEb,MAAKlC,KAAL,CAAWG,QAFE,CAAf;;AAKA,YAAKS,OAAL,CAAaC,MAAb,GAAsB,CAAtB;AACA,YAAKC,MAAL,CAAYD,MAAZ,GAAqB,CAArB;AACA,YAAKE,YAAL,GAAoBkB,WAApB;AACA,YAAKjB,aAAL,GAAqBkB,IAAI,CAACG,IAAL,CAAUG,KAA/B;;AACA,YAAKhB,QAAL,CAAc;AAAErB,QAAAA,QAAQ,EAAEsC;AAAZ,OAAd;AACD,KAnHkB;;AAAA,UAqHnBI,eArHmB,GAqHD,UAAAnB,CAAC,EAAI;AACrB,YAAKS,MAAL,GAAcW,wBAAWC,GAAX,CAAe,QAAf,CAAd;AACA,YAAKX,MAAL,GAAcV,CAAC,CAACsB,WAAF,CAAcZ,MAA5B;;AACA,YAAKa,WAAL;AACD,KAzHkB;;AAAA,UA2HnBC,mBA3HmB,GA2HG,UAAAxB,CAAC,EAAI;AACzB,YAAKyB,cAAL,CAAoBC,OAApB,CAA4B,OAA5B,EAAqC1B,CAAC,CAACsB,WAAvC;AACD,KA7HkB;;AAAA,UA+HnBK,kBA/HmB,GA+HE,UAAA3B,CAAC,EAAI;AACxB,YAAKyB,cAAL,CAAoBC,OAApB,CAA4B,MAA5B,EAAoC1B,CAAC,CAACsB,WAAtC;AACD,KAjIkB;;AAAA,UAmInBM,iBAnImB,GAmIC,UAAA5B,CAAC,EAAI;AACvB,YAAKyB,cAAL,CAAoBC,OAApB,CAA4B,KAA5B,EAAmC1B,CAAC,CAACsB,WAArC;AACD,KArIkB;;AAEjB,UAAKhD,KAAL,GAAa;AACXG,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGA,UAAKe,KAAL,GAAarB,KAAK,CAACqB,KAAN,IAAe,IAAIqC,qBAAJ,EAA5B;;AACA,UAAKrC,KAAL,CAAWsC,SAAX,CAAqB,MAAKxB,aAA1B;;AACA,UAAKpB,OAAL,GAAe,EAAf;AACA,UAAKuB,MAAL,GAAcW,wBAAWC,GAAX,CAAe,QAAf,CAAd;AACA,UAAKhC,YAAL,GAAoB,IAApB;AACA,UAAKC,aAAL,GAAqB,IAArB;AACA,UAAKF,MAAL,GAAc,EAAd;AACA,UAAKqC,cAAL,GAAsBtD,KAAK,CAACsD,cAAN,CAAqB,MAAKvC,OAA1B,CAAtB;AACA,UAAKwB,MAAL,GAAc,IAAd;AAbiB;AAclB;;;;;;;;;;;;AAGKjC,cAAAA,Q,GAAWP,oBAAoB,CAAC,KAAKC,KAAN,C;;mBAE/BO,SAAS,CAACD,QAAD,C;;;;;;gDAA6BA,Q;;;AAAjBA,cAAAA,Q;;;AAEzB,mBAAKqB,QAAL,CACE;AACErB,gBAAAA,QAAQ,EAAEA,QAAQ,IAAI;AADxB,eADF,EAIE,YAAM;AACJ,oBAAI,MAAI,CAACN,KAAL,CAAW4D,OAAf,EAAwB,MAAI,CAACxC,KAAL;AACzB,eANH;;;;;;;;;;;2CAUqB;AACrB,WAAKI,IAAL;AACA,WAAKH,KAAL,CAAWwC,WAAX,CAAuB,KAAK1B,aAA5B;AACA,UAAI,KAAKmB,cAAL,CAAoBQ,GAAxB,EAA6B,KAAKR,cAAL,CAAoBQ,GAApB;AAC9B;;;qDAEgCC,S,EAAW;AAC1C,UAAIA,SAAS,CAACH,OAAV,KAAsB,KAAK5D,KAAL,CAAW4D,OAArC,EAA8C;AAC5C,YAAIG,SAAS,CAACH,OAAd,EAAuB,KAAKxC,KAAL,GAAvB,KACK,KAAKI,IAAL;AACN;AACF;;;6BA6FQ;AACP,aACE,6BAAC,iBAAD;AACE,QAAA,KAAK,EAAE,CAACwC,GAAG,CAACC,SAAL,EAAgB,KAAKjE,KAAL,CAAWkE,KAA3B,CADT;AAEE,QAAA,QAAQ,EAAE,KAAKlB,eAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,6BAAC,iBAAD;AACE,QAAA,KAAK,EAAEgB,GAAG,CAACG,eADb;AAEE,QAAA,YAAY,EAAE,KAAKd,mBAFrB;AAGE,QAAA,WAAW,EAAE,KAAKG,kBAHpB;AAIE,QAAA,UAAU,EAAE,KAAKC,iBAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMG,KAAKzD,KAAL,CAAWoE,QAAX,CAAoB,KAAKjE,KAAL,CAAWG,QAA/B,EAAyC,KAAKgC,MAA9C,EAAsD,KAAKC,MAA3D,CANH,CAJF,EAaE,6BAAC,iBAAD;AACE,QAAA,aAAa,EAAE,UADjB;AAEE,QAAA,KAAK,EAAE8B,wBAAWC,YAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKtE,KAAL,CAAWuE,QAJd,CAbF,CADF;AAsBD;;;EA/JqCC,gB;;;AAkKxC3D,UAAU,CAAC4D,YAAX,GAA0B;AACxB5B,EAAAA,OAAO,EAAE,EADe;AAExBvC,EAAAA,QAAQ,EAAE,EAFc;AAGxB8D,EAAAA,QAAQ,EAAEM,wBAHc;AAIxBpB,EAAAA,cAAc,EAAE,oCAAsB;AACpCqB,IAAAA,uBAAuB,EAAE,GADW;AAEpCC,IAAAA,0BAA0B,EAAE;AAFQ,GAAtB,CAJQ;AAQxBhB,EAAAA,OAAO,EAAE;AARe,CAA1B;;AAWA,IAAMI,GAAG,GAAGK,wBAAWQ,MAAX,CAAkB;AAC5BZ,EAAAA,SAAS,EAAE;AACTa,IAAAA,IAAI,EAAE;AADG,GADiB;AAI5BX,EAAAA,eAAe,EAAE;AACfW,IAAAA,IAAI,EAAE,CADS;AAMfC,IAAAA,eAAe,EAAE;AANF;AAJW,CAAlB,CAAZ","sourcesContent":["import React, { Component } from \"react\";\nimport { View, StyleSheet, Dimensions } from \"react-native\";\nimport DefaultTimer from \"./DefaultTimer\";\nimport DefaultRenderer from \"./DefaultRenderer\";\nimport DefaultTouchProcessor from \"./DefaultTouchProcessor\";\n\nconst getEntitiesFromProps = props =>\n  props.initState ||\n  props.initialState ||\n  props.state ||\n  props.initEntities ||\n  props.initialEntities ||\n  props.entities;\n\nconst isPromise = obj => {\n  return !!(\n    obj &&\n    obj.then &&\n    obj.then.constructor &&\n    obj.then.call &&\n    obj.then.apply\n  );\n};\n\nexport default class GameEngine extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      entities: null\n    };\n    this.timer = props.timer || new DefaultTimer();\n    this.timer.subscribe(this.updateHandler);\n    this.touches = [];\n    this.screen = Dimensions.get(\"window\");\n    this.previousTime = null;\n    this.previousDelta = null;\n    this.events = [];\n    this.touchProcessor = props.touchProcessor(this.touches);\n    this.layout = null;\n  }\n\n  async componentDidMount() {\n    let entities = getEntitiesFromProps(this.props);\n\n    if (isPromise(entities)) entities = await entities;\n\n    this.setState(\n      {\n        entities: entities || {}\n      },\n      () => {\n        if (this.props.running) this.start();\n      }\n    );\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.timer.unsubscribe(this.updateHandler);\n    if (this.touchProcessor.end) this.touchProcessor.end();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.running !== this.props.running) {\n      if (nextProps.running) this.start();\n      else this.stop();\n    }\n  }\n\n  clear = () => {\n    this.touches.length = 0;\n    this.events.length = 0;\n    this.previousTime = null;\n    this.previousDelta = null;\n  };\n\n  start = () => {\n    this.clear();\n    this.timer.start();\n    this.dispatch({ type: \"started\" });\n  };\n\n  stop = () => {\n    this.timer.stop();\n    this.dispatch({ type: \"stopped\" });\n  };\n\n  swap = async newEntities => {\n    if (isPromise(newEntities)) newEntities = await newEntities;\n\n    this.setState({ entities: newEntities || {} }, () => {\n      this.clear();\n      this.dispatch({ type: \"swapped\" });\n    });\n  };\n\n  publish = e => {\n    this.dispatch(e);\n  };\n\n  publishEvent = e => {\n    this.dispatch(e);\n  };\n\n  dispatch = e => {\n    setTimeout(() => {\n      this.events.push(e);\n      if (this.props.onEvent) this.props.onEvent(e);\n    }, 0);\n  };\n\n  dispatchEvent = e => {\n    this.dispatch(e);\n  };\n\n  updateHandler = currentTime => {\n    let args = {\n      touches: this.touches,\n      screen: this.screen,\n      layout: this.layout,\n      events: this.events,\n      dispatch: this.dispatch,\n      time: {\n        current: currentTime,\n        previous: this.previousTime,\n        delta: currentTime - (this.previousTime || currentTime),\n        previousDelta: this.previousDelta\n      }\n    };\n\n    let newState = this.props.systems.reduce(\n      (state, sys) => sys(state, args),\n      this.state.entities\n    );\n\n    this.touches.length = 0;\n    this.events.length = 0;\n    this.previousTime = currentTime;\n    this.previousDelta = args.time.delta;\n    this.setState({ entities: newState });\n  };\n\n  onLayoutHandler = e => {\n    this.screen = Dimensions.get(\"window\");\n    this.layout = e.nativeEvent.layout;\n    this.forceUpdate();\n  };\n\n  onTouchStartHandler = e => {\n    this.touchProcessor.process(\"start\", e.nativeEvent);\n  };\n\n  onTouchMoveHandler = e => {\n    this.touchProcessor.process(\"move\", e.nativeEvent);\n  };\n\n  onTouchEndHandler = e => {\n    this.touchProcessor.process(\"end\", e.nativeEvent);\n  };\n\n  render() {\n    return (\n      <View\n        style={[css.container, this.props.style]}\n        onLayout={this.onLayoutHandler}\n      >\n        <View\n          style={css.entityContainer}\n          onTouchStart={this.onTouchStartHandler}\n          onTouchMove={this.onTouchMoveHandler}\n          onTouchEnd={this.onTouchEndHandler}\n        >\n          {this.props.renderer(this.state.entities, this.screen, this.layout)}\n        </View>\n\n        <View\n          pointerEvents={\"box-none\"}\n          style={StyleSheet.absoluteFill}\n        >\n          {this.props.children}\n        </View>\n      </View>\n    );\n  }\n}\n\nGameEngine.defaultProps = {\n  systems: [],\n  entities: {},\n  renderer: DefaultRenderer,\n  touchProcessor: DefaultTouchProcessor({\n    triggerPressEventBefore: 200,\n    triggerLongPressEventAfter: 700\n  }),\n  running: true\n};\n\nconst css = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  entityContainer: {\n    flex: 1,\n    //-- Looks like Android requires bg color here\n    //-- to register touches. If we didn't worry about\n    //-- 'children' (foreground) components capturing events,\n    //-- this whole shenanigan could be avoided..\n    backgroundColor: \"transparent\"\n  }\n});\n"]},"metadata":{},"sourceType":"script"}